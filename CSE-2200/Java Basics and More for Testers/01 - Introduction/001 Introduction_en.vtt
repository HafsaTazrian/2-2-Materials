WEBVTT

00:00.060 --> 00:01.320
Programming language.

00:01.650 --> 00:03.130
How to code in Java.

00:03.750 --> 00:07.770
How to use different features and functionality of Java.

00:08.130 --> 00:12.630
And also we will be covering the testing framework supported by Java.

00:12.630 --> 00:16.740
That is Jami Best Energy and GitHub.

00:16.740 --> 00:23.520
How you can commit your code, no pool, your build the repo and these kind of basic things.

00:23.940 --> 00:28.440
So let's get started with the introduction of Java first.

00:29.250 --> 00:30.210
What is Java?

00:31.050 --> 00:38.700
Java is a class based, object oriented programming language and is designed to have as few implementation

00:38.700 --> 00:40.470
dependencies as possible.

00:40.890 --> 00:45.960
Because Java goes by, write ones and run it anywhere.

00:46.650 --> 00:48.390
So we will see about that.

00:48.720 --> 00:49.970
It's a class base.

00:49.980 --> 00:56.850
All of the Java code is written inside the class and it supports all the object oriented features.

00:57.870 --> 01:04.110
A general purpose programming language made for developers to write ones and run anywhere.

01:04.620 --> 01:05.880
That is a compile.

01:06.030 --> 01:09.780
Our code can run on all platforms that supports Java.

01:11.130 --> 01:17.970
Java applications are compiled to bytecode that can run on any job of machines.

01:18.540 --> 01:20.880
So this is what Java is.

01:22.470 --> 01:25.800
Now let us get familiar with some of the Java technologies.

01:26.880 --> 01:31.050
First one is Java Virtual Machine JVM.

01:31.650 --> 01:32.070
Right.

01:32.400 --> 01:37.350
Writing a program is done by a Java programmers like you and me.

01:37.860 --> 01:40.800
The compilation is done by Java compiler.

01:41.070 --> 01:47.130
This is a primary Java compiler included in Java Development Kit that is JDK.

01:47.730 --> 01:53.130
It takes Java program as an input and generates the bytecode as output.

01:53.850 --> 02:02.580
In a running phase of the program, JVM executes bytecode generated by the compiler and the code can

02:02.730 --> 02:04.160
be executed any of it.

02:05.370 --> 02:07.680
Then it has a JVM on JVM.

02:07.890 --> 02:08.250
Right.

02:08.940 --> 02:13.170
So this makes Java platform independent language.

02:14.550 --> 02:16.050
Next is bytecode.

02:16.710 --> 02:22.940
So as we already discussed, the compiler converts the java put in to by good.

02:22.950 --> 02:25.020
It's part of our development process.

02:26.130 --> 02:33.360
Well, Judy did while we were using the term JDK when we learned about bytecode in JVM.

02:33.360 --> 02:33.660
Right.

02:33.990 --> 02:39.180
So JDK has a compiler which compiles the program.

02:39.510 --> 02:39.870
Okay.

02:40.470 --> 02:44.100
So it is a as and as the name suggests.

02:44.100 --> 02:44.380
Right.

02:44.400 --> 02:53.370
It is a Java development kit that includes everything that is a compiler, Jari, Java runtime, environment,

02:53.370 --> 02:56.430
Java Debugger, Java Dogs, etc..

02:57.450 --> 02:59.550
Now let us see what is GRC?

02:59.550 --> 03:02.040
That is Java runtime environment.

03:02.430 --> 03:09.660
JDK includes the JRD Jedi installation and our computer allows the Java programs to run.

03:09.870 --> 03:11.640
However, we cannot compile it.

03:12.150 --> 03:18.270
Jerry includes a browser, JVM, applet, supports and plugins.

03:19.960 --> 03:20.510
Next.

03:20.510 --> 03:22.320
So you must have heard this.

03:22.810 --> 03:30.790
That garbage collector in Java programmers can delete the object to delete or reconnect that memory

03:31.090 --> 03:33.160
which we assign to the object.

03:33.580 --> 03:38.860
Oh, there is a program inside JVM that is called as a garbage collector.

03:39.610 --> 03:44.530
Garbage collectors can recollect the object that someone had referenced.

03:44.950 --> 03:53.890
So Java makes the file life of a programmer all very, very easy when handling the memory management.

03:54.370 --> 04:00.940
So a programmer doesn't have to worry about whatever memory is allocated during the program, during

04:00.940 --> 04:08.530
the code for objects, for variables that will be automatically freed when the program execution is

04:08.530 --> 04:11.110
completed by the garbage collector.

04:11.440 --> 04:17.160
So this really makes the life of any Java developer very easy, right?

04:17.710 --> 04:20.500
Well, the last one is the last part.

04:20.950 --> 04:26.200
The last part is the file, but they're the Java runtime and Java compiler.

04:26.200 --> 04:29.470
Look for the dot class files by below.

04:29.890 --> 04:35.620
By default, JDK provides many libraries, and if you want to include external libraries, then you

04:35.620 --> 04:37.020
can add it to the class book.

04:37.510 --> 04:39.980
So this class path concept you will learn.

04:39.980 --> 04:47.890
Then you want to use any other tools or frameworks which which are supported by Java.

04:48.220 --> 04:53.470
Like in your project you want to add selenium Johnson dependencies.

04:53.890 --> 04:56.800
Then you can give the part in the class bud section.

04:57.160 --> 05:03.220
And this is also very important to understand whatever coder, whatever dependencies you want to add

05:03.220 --> 05:04.240
in your code, right?

05:04.660 --> 05:07.480
All those are you can add to the class but.

05:09.820 --> 05:16.120
Now we will go on and check the major functions features of Java Language.

05:16.120 --> 05:18.970
What are the major main features of the language?

05:20.590 --> 05:28.030
Like Mitchell is platform independent that the code, the source code is converted to the bytecode by

05:28.030 --> 05:33.220
the compiler and then it can be executed on the JVM anywhere.

05:33.580 --> 05:33.840
Right.

05:34.210 --> 05:36.040
So that is the main advantage of it.

05:36.220 --> 05:41.950
The second most important advantage of this language is it is the object oriented.

05:42.700 --> 05:49.870
Organizing the program in terms of collections of object is a V of object oriented programming, each

05:49.870 --> 05:52.540
of which represent an instance of the class.

05:53.290 --> 06:00.790
So the main concepts of object oriented programming are abstraction and get relation, inheritance and

06:00.790 --> 06:01.720
polymorphism.

06:02.770 --> 06:03.400
Simple?

06:03.670 --> 06:04.190
Yes.

06:04.210 --> 06:11.110
Java is one of the simple language as it does not have more complex features like pointers operated,

06:11.110 --> 06:15.340
overloading, multiple inheritance and memory allocation.

06:15.340 --> 06:16.900
Explicit memory allocation.

06:17.260 --> 06:21.310
So this makes the this language simple little burst.

06:21.640 --> 06:26.160
Yes, Java is it obvious and it means it is a reliable language.

06:26.170 --> 06:32.710
It is developed in such a way that it puts a lot of effort into checking errors as early as possible.

06:32.710 --> 06:37.960
And that is why Java compiler is able to detect even those areas that are not easy to detect.

06:37.960 --> 06:42.050
But another programming language as it is a secure.

06:42.580 --> 06:47.410
We don't have pointers so we cannot access all the boundaries that it shows.

06:48.130 --> 06:54.430
I know that one expect exceptions and that's why I say with all security flaws like stack corruption

06:54.430 --> 07:00.160
or before overflow, it's not as impossible to happen in Java.

07:01.180 --> 07:02.320
It is distributed.

07:02.320 --> 07:06.580
We can create distributed applications using Java programming languages.

07:07.540 --> 07:11.440
So many open source tools you can see too they are developed in Java.

07:12.310 --> 07:15.160
So yeah, this makes the language distributed.

07:15.160 --> 07:16.780
It supports Multithreading.

07:17.830 --> 07:21.160
So this is also a very important feature here.

07:21.160 --> 07:23.770
It supports Multithreading.

07:24.280 --> 07:25.930
It is a beautiful language.

07:25.930 --> 07:31.710
It's a platform, independent language that it says makes it portable, high performance.

07:31.740 --> 07:36.910
The Java architecture is defined in such a way that it reduces overhead during runtime.

07:37.480 --> 07:41.400
At some time Java used to just in time compiler that is J.

07:41.500 --> 07:50.020
The compiler very compiler compiles called On-Demand basis and which improves the performance dynamic

07:50.020 --> 07:50.900
flexibility.

07:51.820 --> 07:59.170
Java being completely object oriented gives us the flexibility to add classes, new methods to existing

07:59.170 --> 08:02.560
classes, and even creating new classes through subclasses.

08:03.100 --> 08:08.950
Java even supports functions that are done in other languages like C++, with reference to the Native

08:08.950 --> 08:11.500
Matter Sandbox execution.

08:11.770 --> 08:18.430
Java programs run in a separate space that allows users to execute their applications without affecting

08:18.880 --> 08:21.760
the underlying system.

08:24.510 --> 08:26.870
So and right once.

08:27.060 --> 08:32.670
But I know that we have already covered board of compilation and interpretation.

08:32.970 --> 08:33.470
Yes.

08:33.720 --> 08:39.270
Most languages are designed with the Pope as either they are combined language or they're in the printed

08:39.570 --> 08:40.050
language.

08:40.060 --> 08:47.280
But Java integrates arising in almost all what is a Java compiler comprises a school and JVM executes.

08:47.310 --> 08:50.960
So this is a very important features of that.

08:50.970 --> 08:53.100
It makes a platform independent, right?

08:53.110 --> 08:57.690
Once any of it that arguments run anywhere and goes.

08:58.110 --> 09:03.210
It also improves the performance and then we use just in time compiler.

09:03.750 --> 09:08.760
So all these are little features of Java, really a Java programming language.

09:09.450 --> 09:12.330
So this is about the introduction to Java.

09:12.990 --> 09:14.490
Let's get to the next one.
