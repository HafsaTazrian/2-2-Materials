WEBVTT
Kind: captions
Language: en

00:00:12.470 --> 00:00:15.160
Exercise: Variable Handling in Java

00:00:21.430 --> 00:00:25.480
we would create a program to practice creating variables in Java. In the end

00:00:25.490 --> 00:00:27.080
we should observe the following.

00:00:30.830 --> 00:00:37.070
We close any other project that is open, for example the project HelloWorld. We right click over the name of

00:00:37.070 --> 00:00:41.870
the project and select Close.

00:00:42.180 --> 00:00:48.050
We create a new project called Variable Handling. Click on file and select new project

00:00:52.370 --> 00:00:56.630
we select the Java Category, and Java Application and after that click on Next

00:01:00.270 --> 00:01:04.320
we assign a name and a path for our new project as shown below.

00:01:04.320 --> 00:01:06.360
The project name is VariableHandlling.

00:01:06.390 --> 00:01:12.360
The project location is in c:\Courses\Java Fundamentals\Lesson02 and click on Finish.

00:01:12.470 --> 00:01:14.870
We do not select the Create Main Class.

00:01:15.120 --> 00:01:17.450
We will create the main class by ourselves

00:01:22.120 --> 00:01:28.640
create a new Java class. Over the name of the project, right click select New and after that select

00:01:28.760 --> 00:01:31.500
Java Class

00:01:33.380 --> 00:01:40.020
We assign the name VariablesHandlingTest to our new class and assigned to a new package name variables.

00:01:40.100 --> 00:01:42.470
Remember that package is like a folder.

00:01:42.620 --> 00:01:48.640
We will cover the topic of packages later in the course and click on Finish.

00:01:48.640 --> 00:01:53.750
This is the result of the created class. We are going to modify this class with the following code.

00:01:55.490 --> 00:01:59.180
You can click on the name of the file to download the source code.

00:01:59.210 --> 00:02:02.400
First we declare a package as we said,

00:02:02.490 --> 00:02:05.700
a package is like a folder.

00:02:05.700 --> 00:02:14.010
After that we code public class VariableHandlingTest open (curly) bracket and write

00:02:14.030 --> 00:02:21.440
the main method. As we said the main method is needed to execute our program, so we write public static

00:02:21.690 --> 00:02:25.770
void main an Array of the Strings that is called args.

00:02:25.840 --> 00:02:34.200
That means arguments, and we write a comment, as we said a comment doesn't affect the execution of our program

00:02:34.830 --> 00:02:39.360
and this comment says: boolean variables declaration.

00:02:39.490 --> 00:02:47.890
So we first declare a variable called flag1 and in this case this variable is of type boolean, and every sentence

00:02:47.930 --> 00:02:54.050
in Java ends with semicolon. After the declaration of the variable flag1.

00:02:54.400 --> 00:03:01.210
let's initialize this variable. We assign the value of true to this variable.

00:03:01.220 --> 00:03:08.630
After that we declare and initialize a new variable called flag2 of type boolean. In this line as

00:03:08.630 --> 00:03:16.250
we see we declare and initialize this variable in the same line, so we can declare and initialize a variable

00:03:16.640 --> 00:03:18.920
in two lines or in one line.

00:03:18.940 --> 00:03:27.900
The most common use is that we initialize a variable in one line, so we write: boolean flag2 = false;

00:03:27.900 --> 00:03:33.740
and we print these values, so we write System.out.println.

00:03:33.780 --> 00:03:42.340
write the string "boolean flag1 value" and concatenate the value of the flag1 variable.

00:03:42.510 --> 00:03:46.530
After that we send the value of flag to to the console.

00:03:46.590 --> 00:03:53.790
So we write "boolean flag2 value" and concatenate the value of flag2 variable, and this line prints a new

00:03:53.790 --> 00:03:55.130
line in the console.

00:03:56.060 --> 00:03:59.800
Next we use the byte variables.

00:03:59.850 --> 00:04:05.140
We declared a variable called b1 and assigned a value of 10.

00:04:05.280 --> 00:04:10.200
So we assign the decimal value of 10 to the byte variable b1.

00:04:10.340 --> 00:04:15.960
literals in hexadecimal starts with 0x (or 0X) for example.

00:04:16.180 --> 00:04:25.140
We declare a variable called b2 and assign a value of: 0xa and is equal to 10 decimal (number system).

00:04:25.150 --> 00:04:32.230
So these is an hexadecimal value but is equal to 10 in decimal.

00:04:32.330 --> 00:04:39.090
We print the byte value b1 and print the value b2. In both

00:04:39.180 --> 00:04:47.600
we will get the 10 value, and print a new line too. Next,

00:04:47.650 --> 00:04:56.850
we work with short variables. We declare a short variable: s1 = 2 ; and print the value of short

00:04:56.850 --> 00:05:06.330
value s1. Print a new line. After that we declared a char variable. We declare and initialize in one

00:05:06.330 --> 00:05:07.730
line of code.

00:05:08.010 --> 00:05:12.790
The first declaration is in unicode. As a reference

00:05:12.800 --> 00:05:14.190
You can check the next link.

00:05:15.120 --> 00:05:20.720
So we declare two variables, as we see to separate the declaration of the variables,

00:05:20.820 --> 00:05:30.450
we only use a comma. So, we declare a char variable called ch1 = 65; in the next value

00:05:30.630 --> 00:05:36.870
we declared a variable called ch2 = 'A' (in uppercase). In the first case.

00:05:36.950 --> 00:05:37.830
ch1.

00:05:37.950 --> 00:05:42.570
we are using the unicode table to assign the value of 'A'.

00:05:42.570 --> 00:05:47.760
So 65 is equal to 'A'.

00:05:47.800 --> 00:05:51.730
We print the 'A' value in unicode, the value of 65

00:05:54.600 --> 00:06:00.250
and print the value of char2, which prints the same value of 'A'.

00:06:00.300 --> 00:06:01.740
We print a new line.

00:06:01.750 --> 00:06:05.280
Next we see the int variables. We can use decimals values.

00:06:05.280 --> 00:06:13.270
for example, we can declare a variable called: decimal = 100,  but we can use an octal

00:06:13.270 --> 00:06:15.870
value which starts with 0.

00:06:16.000 --> 00:06:20.940
In this case we declare a variable called octal, which starts with zero.

00:06:21.010 --> 00:06:26.610
So is an octal value and assign the value of 0144.

00:06:26.630 --> 00:06:32.540
we can also work with hexadecimal values

00:06:32.690 --> 00:06:42.460
In this case an hexadecimal value starts with 0x so we can assign the value of 0x64

00:06:45.200 --> 00:06:46.400
in the three cases.

00:06:46.460 --> 00:06:55.960
it prints 100 in any case. And print a new line.

00:06:56.200 --> 00:07:01.230
Let's work with long variables. By default any literal for example.

00:07:01.260 --> 00:07:06.880
these literal of 10 is of type int, but we can change the type of the literal,

00:07:06.900 --> 00:07:13.160
for example in this case using the L (or l) and it converts the literal to long type.

00:07:13.210 --> 00:07:16.930
So we declared two variables in the first case, a variable called

00:07:16.930 --> 00:07:24.010
long1 = 10; but the value of 10 is of type int and is converted to a long type.

00:07:24.040 --> 00:07:32.770
We'll see conversions later in this course. But in the second case we assign a literal value of 20 an is

00:07:32.770 --> 00:07:40.970
of type long. We print the long1 value and long2, and print a new line.

00:07:42.490 --> 00:07:51.900
Float variables. By default a float literal (errata: literal not variable) is of type double, so we need to use F (or f) if we want the

00:07:51.900 --> 00:07:54.580
literal to be converted to a float value.

00:07:55.710 --> 00:07:56.760
We print the values

00:07:59.810 --> 00:08:01.630
and finally the double variables.

00:08:01.760 --> 00:08:06.500
As we said by default a  float literal is of type double. And with the suffix D

00:08:06.500 --> 00:08:10.220
converts a literal to double.

00:08:10.250 --> 00:08:19.100
We print the values of d1 and d2. We close the main method and close the class. With this ends the

00:08:19.100 --> 00:08:23.220
code of the VariablesHandlingTest.java

00:08:24.920 --> 00:08:26.030
As a next step

00:08:26.030 --> 00:08:27.620
we execute our project.

00:08:27.740 --> 00:08:35.220
We right click on the name of the VariablesHandlingTest.java file and select Run File.

00:08:38.740 --> 00:08:45.660
And this is the result. As we see we've sent to the console every variable that we declare in the program.

00:08:45.880 --> 00:08:54.460
So you can check the boolean, byte, short, chart, int, long, float and double values sent to the console.

00:08:58.420 --> 00:09:04.500
Extra tasks of the exercise. Try to create more variables and verify the results.

00:09:04.500 --> 00:09:11.360
And if you have any problems you can check the source code that we gave to you.

00:09:12.830 --> 00:09:18.290
Exercise conclusion. With this exercise we are putting into practice the creation of variables, which are

00:09:18.290 --> 00:09:22.900
the basis for storing information temporarily of our program.

00:09:22.960 --> 00:09:28.460
For more information on the topic of variables in Java, as well as the data types, you can check the following

00:09:28.460 --> 00:09:29.740
links.

