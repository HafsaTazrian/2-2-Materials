1
00:00:01,400 --> 00:00:04,707
Hello again, this is John from
caveofprogramming.com.

2
00:00:04,707 --> 00:00:08,482
And in this tutorial we're gonna look at
loading

3
00:00:08,482 --> 00:00:13,940
the existing people in the database into
our database class.

4
00:00:13,940 --> 00:00:17,740
So, we're gonna retrieve the existing data
in the database and

5
00:00:17,740 --> 00:00:23,200
pull it, create it, create person objects
to represent that data, basically.

6
00:00:23,200 --> 00:00:29,720
So I've already got a save method here,
and in my database class.

7
00:00:29,720 --> 00:00:34,760
And I'm gonna create a public void load
method.

8
00:00:34,760 --> 00:00:36,940
And the first thing I'm gonna do in load
is clear.

9
00:00:36,940 --> 00:00:42,990
The existing people I've got stored in my
list

10
00:00:42,990 --> 00:00:46,000
of people up here in my data base class.

11
00:00:46,000 --> 00:00:48,080
So I'll clear that cuz I want to load new
ones in.

12
00:00:48,080 --> 00:00:51,890
And, I'm gonna create a statement here,
and

13
00:00:51,890 --> 00:00:54,040
it's not going to be a preferred
statement.

14
00:00:54,040 --> 00:00:57,790
Because I don't need to use, place all
this in my select statement.

15
00:00:57,790 --> 00:01:00,560
So it's just gonna be a plain statement.

16
00:01:00,560 --> 00:01:01,700
And I'll call that select.

17
00:01:01,700 --> 00:01:07,326
Let's call it selectStatement, and I'll
set

18
00:01:07,326 --> 00:01:13,387
that equal to com.createStatement, like
this.

19
00:01:13,387 --> 00:01:19,332
And the next thing is to, let's have the
import there, java.sql.statement.

20
00:01:19,332 --> 00:01:22,302
And, and ah,this throws a SQL exception,

21
00:01:22,302 --> 00:01:25,520
so that's likely throws an exception as
well.

22
00:01:26,940 --> 00:01:33,170
And then I can say select
statement.execute.query,

23
00:01:33,170 --> 00:01:38,160
and I can parse some SQL in there to
execute.

24
00:01:38,160 --> 00:01:40,950
And let's create the SQL string up here
actually.

25
00:01:40,950 --> 00:01:45,930
So SQL equals, and then later on I'll
parse that in down here.

26
00:01:45,930 --> 00:01:50,050
Now the SQL I want to execute.

27
00:01:50,050 --> 00:01:53,570
Queue is just gonna be a select star from
people basically.

28
00:01:54,710 --> 00:01:55,210
But

29
00:01:57,170 --> 00:02:02,630
I I'm gonna repeat the column names in my
select star just because

30
00:02:02,630 --> 00:02:07,768
it'll help me remember what's actually in
the person database.

31
00:02:07,768 --> 00:02:12,690
And so let's say select,

32
00:02:14,760 --> 00:02:16,920
paste that lot in from

33
00:02:19,030 --> 00:02:19,930
from people.

34
00:02:19,930 --> 00:02:24,790
And I'll say order by ID.

35
00:02:27,990 --> 00:02:30,370
And or maybe we should sort it by name,
actually.

36
00:02:30,370 --> 00:02:31,470
There's an idea.

37
00:02:31,470 --> 00:02:32,290
Let's do that.

38
00:02:32,290 --> 00:02:33,060
Multiply a name.

39
00:02:35,550 --> 00:02:40,500
And I can of course test that query before
I run it, which will be handy.

40
00:02:40,500 --> 00:02:43,710
So let's try running that, and it seems to
work.

41
00:02:43,710 --> 00:02:45,930
Which is good, I've just got two people in
my database.

42
00:02:47,220 --> 00:02:49,770
So after I've created this statement, I
mustn't

43
00:02:49,770 --> 00:02:55,170
forget to destroy it, so I'll say select
statement.close.

44
00:02:55,170 --> 00:02:58,530
And now I can get a result set from
executing

45
00:02:58,530 --> 00:03:03,640
that statement, and oh, actually that's
that's this bit here.

46
00:03:03,640 --> 00:03:07,030
So when I execute query some move up here.

47
00:03:08,400 --> 00:03:11,520
So of course, we need to close it after
executing it.

48
00:03:13,280 --> 00:03:16,913
Then that's going to return a thing of
tight result sets.

49
00:03:16,913 --> 00:03:21,340
So result set, results equals.

50
00:03:22,660 --> 00:03:29,920
And after you finish with result set, you
also close that, so close, like this.

51
00:03:31,280 --> 00:03:35,100
And now I'm going to say, while results
start next.

52
00:03:35,100 --> 00:03:40,330
And each time I call next, it's going to
move us on to the next row.

53
00:03:40,330 --> 00:03:46,180
And the result set begins initialized to a
point before the first row.

54
00:03:46,180 --> 00:03:50,650
So I need to call results.next, before I
can retrieve any data at all.

55
00:03:51,900 --> 00:03:55,908
And once I've done that, I can use
results.get.

56
00:03:55,908 --> 00:03:58,680
The results.get methods.

57
00:03:58,680 --> 00:04:04,280
So, like, get, int for our first column.

58
00:04:04,280 --> 00:04:08,434
And I've actually parse, column names in
here strings.

59
00:04:08,434 --> 00:04:11,880
Which is a bit clearer than using common
texts I think.

60
00:04:11,880 --> 00:04:14,820
And I'm not going to worry too much about
errors here.

61
00:04:16,570 --> 00:04:20,200
if, if there's a mismatch between what
what common

62
00:04:20,200 --> 00:04:23,160
names in the database, and what it
actually retrieve.

63
00:04:23,160 --> 00:04:29,080
It will I think, will throw a c code
exception, which will be caught here.

64
00:04:29,080 --> 00:04:33,220
So, that's enough error handling here, I
feel for this application.

65
00:04:33,220 --> 00:04:37,010
And let's restart to test the principle.

66
00:04:37,010 --> 00:04:41,410
So I can say int id equals and then let's
print out id.

67
00:04:41,410 --> 00:04:44,960
And it's always good to test your codes
with just like a

68
00:04:44,960 --> 00:04:50,730
really minimal skeleton type thing rather
than before make it more complex.

69
00:04:50,730 --> 00:04:52,590
And I'll go to my test code here.

70
00:04:52,590 --> 00:04:56,530
So add it people, updated people.

71
00:04:56,530 --> 00:05:00,206
And let, let's say here db.load.

72
00:05:00,206 --> 00:05:03,320
Call the load method.

73
00:05:03,320 --> 00:05:03,820
There we go.

74
00:05:05,630 --> 00:05:10,370
So, and I need to catch the SQL exception
of course surrounded to try and catch.

75
00:05:11,730 --> 00:05:14,320
And I'll run this and it'll start updating

76
00:05:14,320 --> 00:05:16,987
people and I've got two ids coming out
here.

77
00:05:16,987 --> 00:05:19,967
So it seems to be working now let, lets go

78
00:05:19,967 --> 00:05:24,277
through now and get all the other stuff
from the database.

79
00:05:24,277 --> 00:05:30,832
So string name equals resorts.getInt name
and this is going to

80
00:05:30,832 --> 00:05:37,870
be a little bit tedious with get string of
course get string.

81
00:05:37,870 --> 00:05:39,290
This is gonna be a little bit tedious.

82
00:05:39,290 --> 00:05:41,810
But I'll speed it up slightly by pasting
some of this in.

83
00:05:41,810 --> 00:05:47,701
So let's have 1, 2, 3, 4, 5, 6, 7, 8.

84
00:05:47,701 --> 00:05:50,300
And we've got name, age.

85
00:05:51,320 --> 00:05:53,950
And let's call it, for employment, tax.

86
00:05:56,070 --> 00:06:04,006
Is US, and gender, and occupation.

87
00:06:04,006 --> 00:06:04,691
Let's call it occ.

88
00:06:06,680 --> 00:06:10,105
Now name is string.

89
00:06:10,105 --> 00:06:10,780
Age is a string.

90
00:06:10,780 --> 00:06:11,614
Emp is a string.

91
00:06:11,614 --> 00:06:20,340
Text is Boolean oops, I'm actually pasting
the wrong things in here.

92
00:06:20,340 --> 00:06:25,740
I've got name, age, employment status,
let's

93
00:06:25,740 --> 00:06:28,850
worry about these field names for start.

94
00:06:28,850 --> 00:06:30,150
Because these have to be right.

95
00:06:30,150 --> 00:06:32,140
So an U.S. citizen.

96
00:06:34,880 --> 00:06:38,450
gender, gender goes here.

97
00:06:38,450 --> 00:06:40,710
And occupation.

98
00:06:41,840 --> 00:06:43,654
So of course, these all have to match

99
00:06:43,654 --> 00:06:46,121
the common names that's the whole point to
them.

100
00:06:46,121 --> 00:06:51,350
[UNKNOWN] So I think this is all, I think
this is all correct.

101
00:06:51,350 --> 00:06:54,550
And, and now I have too much to word types
here.

102
00:06:54,550 --> 00:06:56,520
Cuz I can't always use GetString.

103
00:06:56,520 --> 00:06:59,910
So most of them are actually, strings.

104
00:07:01,570 --> 00:07:06,615
I think, let's see, I think, so, tax id is
even a string.

105
00:07:06,615 --> 00:07:14,250
U.S. citizen is a Boolean, it's a
getBoolean, maybe it's not.

106
00:07:14,250 --> 00:07:17,330
Oh, yeah, well that's gotta be also
Boolean.

107
00:07:17,330 --> 00:07:19,450
Let's have a look.

108
00:07:19,450 --> 00:07:20,970
That seems to be okay.

109
00:07:20,970 --> 00:07:23,180
Gender and occupation.

110
00:07:23,180 --> 00:07:25,660
Let's just print out another one.

111
00:07:25,660 --> 00:07:27,820
I've made an, any mistakes here.

112
00:07:27,820 --> 00:07:30,590
So I run this code and it seems to be,
okay.

113
00:07:31,670 --> 00:07:38,230
So, now, I can create the, person, object
here.

114
00:07:38,230 --> 00:07:44,070
And I can say person, in fact I could just
create that on a the fly so to speak.

115
00:07:44,070 --> 00:07:50,605
Statement say people, that's my array list
in database class.odds.

116
00:07:52,040 --> 00:07:57,288
And then I can say, here, new person, so,
new, person.

117
00:07:57,288 --> 00:08:04,990
And, I new to supply, to supply a load of
stuff to the constructor.

118
00:08:04,990 --> 00:08:10,440
And, and I also need here to supply an id,
and I

119
00:08:10,440 --> 00:08:15,860
haven't actually given the person object
yet, a constructor that can take an id.

120
00:08:15,860 --> 00:08:17,330
So I'm going to go to person here, and

121
00:08:19,490 --> 00:08:26,960
I'm gonna create a, an overloaded
constructor here, so let's copy this.

122
00:08:26,960 --> 00:08:30,310
And I'll say this is int id.

123
00:08:30,310 --> 00:08:37,970
And then, in here, I can say, this.id
equals id.

124
00:08:37,970 --> 00:08:42,700
now, I don't want to set the id in this
constructor.

125
00:08:42,700 --> 00:08:46,270
So, I could get rid of that.

126
00:08:48,320 --> 00:08:53,180
and, should we increment the count, there
is

127
00:08:53,180 --> 00:08:55,910
no harm in it actually so increment count.

128
00:08:57,000 --> 00:09:03,220
And, but now, it would make sense really
if one constructor would

129
00:09:03,220 --> 00:09:08,359
call the other so I could, I could, in
this constructor here.

130
00:09:09,430 --> 00:09:11,070
I could call the other constructor.

131
00:09:12,480 --> 00:09:13,595
But actually, I'll leave that for a

132
00:09:13,595 --> 00:09:15,450
moment, cuz it's just gonna complicate
things.

133
00:09:15,450 --> 00:09:18,580
So the main thing here is I just need
another constructor that

134
00:09:18,580 --> 00:09:23,690
accepts an id, and sets the id rather than
setting it using count.

135
00:09:23,690 --> 00:09:26,420
So, I'll leave it as it is for the moment.

136
00:09:26,420 --> 00:09:27,240
But you could make one called.

137
00:09:27,240 --> 00:09:27,690
Call the other.

138
00:09:27,690 --> 00:09:30,680
That would be, that would get rid of

139
00:09:30,680 --> 00:09:36,240
this kinda redundant, redundant code here,
kinda extra code.

140
00:09:36,240 --> 00:09:39,650
In fact now that I look at it, I'm
starting

141
00:09:39,650 --> 00:09:42,560
to feel like I really can't, I really
can't leave it.

142
00:09:42,560 --> 00:09:43,930
Let's do that.

143
00:09:43,930 --> 00:09:47,625
It's a little bit boring, but let's say,
in here.

144
00:09:47,625 --> 00:09:57,145
This parse this all in, so name,
occupation, age, category.

145
00:09:57,145 --> 00:10:04,840
Age, category and [UNKNOWN] tax ID.

146
00:10:04,840 --> 00:10:08,120
And Eclipse is very helpful here in,

147
00:10:10,130 --> 00:10:13,830
in helping me to fill in the values, and
telling me what I have to fill in.

148
00:10:13,830 --> 00:10:16,090
So this is just calling the other
constructor.

149
00:10:18,072 --> 00:10:21,940
and, and then then you have, the trouble

150
00:10:21,940 --> 00:10:24,150
is you have to construct actually in
increments.

151
00:10:24,150 --> 00:10:26,090
Actually sets the id.

152
00:10:26,090 --> 00:10:33,150
But let's just override it here so we can
say this.id equals id.

153
00:10:33,150 --> 00:10:35,280
So here in my new constructer.

154
00:10:35,280 --> 00:10:40,590
Call the other constructor thus
eliminating this redundant code.

155
00:10:40,590 --> 00:10:47,210
And, I, this constructor sets the id to
count and increments count.

156
00:10:47,210 --> 00:10:50,670
Then, after I've done that, I'm then
setting

157
00:10:50,670 --> 00:10:53,280
this id actually to the id that's passed
in.

158
00:10:53,280 --> 00:10:54,119
So I think that should work.

159
00:10:55,290 --> 00:10:57,360
And let's take a look here.

160
00:10:57,360 --> 00:11:02,913
So now I need to fill in these values, so
I need

161
00:11:02,913 --> 00:11:08,755
to say id, and name, and the the age here,

162
00:11:08,755 --> 00:11:13,887
is actually an object type age category.

163
00:11:13,887 --> 00:11:17,160
So it's an anon, and I need to convert my
anon from data.

164
00:11:17,160 --> 00:11:23,830
It's two and age category and now that's
two I'm going to use age category m value

165
00:11:23,830 --> 00:11:29,927
off and pass in the age string, like that
and attach.

166
00:11:29,927 --> 00:11:35,000
And that should, that should work, I'm not
sure why it doesn't like it.

167
00:11:36,120 --> 00:11:37,910
Let's take a look.

168
00:11:37,910 --> 00:11:40,420
So maybe I pasted the wrong, wrong one in
there.

169
00:11:42,120 --> 00:11:43,530
Age category.

170
00:11:43,530 --> 00:11:44,380
Yes, so we've got id.

171
00:11:44,380 --> 00:11:45,580
We've got name.

172
00:11:45,580 --> 00:11:47,080
Yeah, we've got occupation first.

173
00:11:47,080 --> 00:11:47,750
Occupation.

174
00:11:48,940 --> 00:11:50,970
And then age category.

175
00:11:50,970 --> 00:11:52,500
And let's maximize the [UNKNOWN] there.

176
00:11:52,500 --> 00:11:54,610
It's more [UNKNOWN].

177
00:11:54,610 --> 00:11:55,870
Employment categories.

178
00:11:55,870 --> 00:12:01,436
So, saying again, top value of end, and if
ever your

179
00:12:01,436 --> 00:12:07,516
autocomplete stops working when you press
Ctrl + Space.

180
00:12:07,516 --> 00:12:10,930
It's a sign that you got the, you got the
arguments wrong.

181
00:12:11,970 --> 00:12:17,096
So, and then we need tax id, U.S. citizen
so

182
00:12:17,096 --> 00:12:22,604
this is U.S. and gender which is again a
numeration.

183
00:12:22,604 --> 00:12:25,950
So gender value of, you're passing the
gender string now.

184
00:12:25,950 --> 00:12:31,378
And of course, if you added another
numeration value to your database

185
00:12:31,378 --> 00:12:36,715
you will probably often not succeed and
you'll throw an exception.

186
00:12:36,715 --> 00:12:46,380
So if I yeah occupation I got I actually
called it occ so lets check that.

187
00:12:46,380 --> 00:12:47,310
And see what we get.

188
00:12:47,310 --> 00:12:51,280
Let's save it and I've got tax id.

189
00:12:51,280 --> 00:12:52,790
I'll call it tax.

190
00:12:52,790 --> 00:12:54,300
Let's rename it to tax id.

191
00:12:54,300 --> 00:12:55,050
That's simpler.

192
00:12:56,640 --> 00:12:57,910
And, and there we go.

193
00:12:57,910 --> 00:13:02,830
So I'm not gonna worry about trapping
exceptions from

194
00:13:02,830 --> 00:13:05,250
the enums and trying to convert values
that are wrong.

195
00:13:05,250 --> 00:13:09,061
And I'll leave that as [UNKNOWN].

196
00:13:09,061 --> 00:13:11,893
And we can try what happens if you put,

197
00:13:11,893 --> 00:13:16,012
the wrong kinda argument there that
[UNKNOWN] can't convert.

198
00:13:16,012 --> 00:13:17,230
But that should do the trick.

199
00:13:17,230 --> 00:13:19,930
So, I've added a new person to my
database.

200
00:13:19,930 --> 00:13:24,590
And, and actually, I think what I will do
is partly because this

201
00:13:24,590 --> 00:13:27,230
is quite a long line and partly because I
want to debug it.

202
00:13:27,230 --> 00:13:30,690
I'll just take that out here, type in
person

203
00:13:30,690 --> 00:13:34,600
and I'll say person, person equals new
person there.

204
00:13:34,600 --> 00:13:41,640
And I'm just gonna say here [UNKNOWN]
person to see how that looks.

205
00:13:41,640 --> 00:13:43,610
Now, if I run this.

206
00:13:43,610 --> 00:13:48,900
It's I forgot that I didn't give person
two strings, actually.

207
00:13:48,900 --> 00:13:50,203
I could do.

208
00:13:50,203 --> 00:13:54,270
So let's go to here and I'll give

209
00:13:54,270 --> 00:13:57,860
it really quickly just a really simple two
string.

210
00:13:57,860 --> 00:14:03,650
I'll say public string to string, and I'll

211
00:14:03,650 --> 00:14:08,550
say, I'll just return I won't even use
string builder here.

212
00:14:08,550 --> 00:14:16,670
I'll just use id plus plus name.

213
00:14:16,670 --> 00:14:18,670
On the person, and then if I run that,

214
00:14:19,800 --> 00:14:22,830
these are the people that it's retrieving
from the database.

215
00:14:22,830 --> 00:14:25,870
So, once again, if this was a real
application.

216
00:14:26,900 --> 00:14:28,260
And you didn't want to use some kinda

217
00:14:28,260 --> 00:14:31,890
assistance framework to handle sorta this
business for you.

218
00:14:31,890 --> 00:14:32,390
Then,

219
00:14:34,580 --> 00:14:40,970
then you probably would want to test this
quite a lot more using probably j unit.

220
00:14:40,970 --> 00:14:43,260
Here I'm not going to worry about it.

221
00:14:43,260 --> 00:14:45,330
I'm just going to leave at that it
basically works.

222
00:14:45,330 --> 00:14:50,429
And in the next tutorial, and while we're
finished with JJBC now, and in

223
00:14:50,429 --> 00:14:55,699
the next tutorial we're gonna look at
wiring this code into our application.

224
00:14:55,699 --> 00:15:01,630
Because remember I've just been using it
to test class here and to test data base.

225
00:15:01,630 --> 00:15:05,464
And in the next tutorial we're gonna look
at, I'm

226
00:15:05,464 --> 00:15:09,132
gonna have a button that saves data on the
table.

227
00:15:09,132 --> 00:15:12,433
And, and we're gonna have a refresh button
that loads it in.

228
00:15:12,433 --> 00:15:14,810
And we're just gonna look at where you can
terminate

229
00:15:14,810 --> 00:15:18,270
your database connection and where you can
do the connect.

230
00:15:18,270 --> 00:15:21,410
So that's for the next tutorial, and join
me again then.

231
00:15:21,410 --> 00:15:23,730
And until next time, happy coding.

