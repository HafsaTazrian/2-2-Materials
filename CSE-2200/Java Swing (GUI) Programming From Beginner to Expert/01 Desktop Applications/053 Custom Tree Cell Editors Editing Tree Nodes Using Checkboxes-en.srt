1
00:00:01,790 --> 00:00:06,380
Hello, this is John from [UNKNOWN]
programming.com, and in this tutorial,

2
00:00:06,380 --> 00:00:10,850
we're going to look at creating editors
for your tree cells.

3
00:00:10,850 --> 00:00:13,318
So, in a moment, we've got this
application,

4
00:00:13,318 --> 00:00:19,080
and checkboxes here in this message's
tree, so.

5
00:00:19,080 --> 00:00:23,800
Whether the node has a selected status or
not.

6
00:00:23,800 --> 00:00:26,120
But you can't actually check or uncheck
the nodes

7
00:00:26,120 --> 00:00:28,240
and we're gonna look at that in this
tutorial.

8
00:00:29,640 --> 00:00:32,590
Now I have to warn you that tree

9
00:00:32,590 --> 00:00:36,866
sort editors are one of the most
complicated things.

10
00:00:36,866 --> 00:00:39,010
That you can do and swing, and even when

11
00:00:39,010 --> 00:00:41,810
you do them the results aren't perfect to
tell you

12
00:00:41,810 --> 00:00:47,610
the truth, because your, your trees may
not be fully

13
00:00:47,610 --> 00:00:50,260
be accessible by keyboard unless you do
even more work.

14
00:00:51,390 --> 00:00:54,570
Nevertheless, we'll, we'll look at them
here.

15
00:00:54,570 --> 00:00:59,730
And if you find this tutorial too complex
my advice

16
00:00:59,730 --> 00:01:03,850
is just pretty much cuts and paste the
code and you

17
00:01:03,850 --> 00:01:06,500
can always do a Google search and find a
similar code

18
00:01:06,500 --> 00:01:10,549
for yourself and you might want to look at
for example.

19
00:01:11,650 --> 00:01:13,980
List box editors or table cell editors,

20
00:01:13,980 --> 00:01:16,790
they're a bit simpler than tree cell
editors.

21
00:01:16,790 --> 00:01:21,160
But anyway, I'll do my best to make this
as simple as possible.

22
00:01:22,360 --> 00:01:26,030
So, in a moment if I go to the message
here,

23
00:01:27,550 --> 00:01:31,260
so I've got a I've got a tree I'm creating
and

24
00:01:31,260 --> 00:01:34,490
I'm sitting a custom render on my checkbox
render on the

25
00:01:34,490 --> 00:01:38,635
tree and I've called that render a server
tree, so I'll render.

26
00:01:38,635 --> 00:01:40,840
[UNKNOWN], because this is supposed to be

27
00:01:40,840 --> 00:01:43,080
a tree with different server locations in
it.

28
00:01:44,960 --> 00:01:48,390
And I'm gonna start here by creating a new
class.

29
00:01:48,390 --> 00:01:53,540
And I'm gonna call this class
ServerTreeCellEditor.

30
00:01:55,910 --> 00:02:00,390
Now ServerTreeCellEditor is gonna
implement, the

31
00:02:01,890 --> 00:02:06,920
It's gonna implement the server, sorry,
the tree cell

32
00:02:06,920 --> 00:02:11,050
editor interface, just like the import
layer, implement.

33
00:02:13,330 --> 00:02:16,450
But this tree ell editor interface has a
lot of methods

34
00:02:16,450 --> 00:02:20,930
in it, and we can actually get default
implementations of them.

35
00:02:20,930 --> 00:02:23,360
From the a cast called abstract cell
editor.

36
00:02:23,360 --> 00:02:30,570
So I'm gonna make it extend abstract cell
editor, like this.

37
00:02:30,570 --> 00:02:32,230
It's not that important.

38
00:02:32,230 --> 00:02:37,509
Now if I over-ride and implement the
methods, now, you've only got two.

39
00:02:38,530 --> 00:02:43,520
And I'm going to also overwrite another
very important method here.

40
00:02:43,520 --> 00:02:47,620
So, I'm going to right click, go to
source, overwrite

41
00:02:47,620 --> 00:02:52,910
implement methods, and I'm gonna overwrite
the is cell editable method.

42
00:02:54,640 --> 00:02:59,230
Now to understand the tree cell editor,
really you've just got to get.

43
00:02:59,230 --> 00:03:00,890
Get your head around these three methods.

44
00:03:02,450 --> 00:03:06,920
And what happens is these are called in
sequence by the tree.

45
00:03:06,920 --> 00:03:13,160
When you click on a node, first is cell
editable will be called, and if that

46
00:03:13,160 --> 00:03:15,470
returns false, then that's the end of a

47
00:03:15,470 --> 00:03:18,520
matter and the other two methods won't be
called.

48
00:03:18,520 --> 00:03:23,010
If it returns true, to say that the cell
is editable.

49
00:03:23,010 --> 00:03:28,090
What happens next is that the tree will
call, get cell editor editor component,

50
00:03:28,090 --> 00:03:33,150
and that's got to return some kind of
component that allows you to edit, like a

51
00:03:33,150 --> 00:03:40,250
check box for example, and get tree cell
editor component then has to fire.

52
00:03:40,250 --> 00:03:42,600
A editing stopped event.

53
00:03:42,600 --> 00:03:46,800
It's got to call the method, called, I
think it's called fire editing stopped.

54
00:03:47,940 --> 00:03:51,990
And that's what triggered the tree to call
get cell editor volume.

55
00:03:51,990 --> 00:03:57,950
And that's called retrieve the user object
value for that tree node.

56
00:03:57,950 --> 00:04:01,150
Which is in this case is going to be a
server info object.

57
00:04:01,150 --> 00:04:02,270
Because that's the user...

58
00:04:02,270 --> 00:04:06,640
The object that we've set in the tree.

59
00:04:06,640 --> 00:04:07,570
And the tree leaves.

60
00:04:08,900 --> 00:04:11,600
So here we, we're creating word child to
default multiple tree nodes.

61
00:04:11,600 --> 00:04:16,820
And the leaves of this server info, user
object word past load constructor.

62
00:04:16,820 --> 00:04:21,550
So let's go ahead and implement that lot.

63
00:04:21,550 --> 00:04:23,660
So the first thing I'm gonna do.

64
00:04:23,660 --> 00:04:30,970
I'm actually gonna create an instance of
my server, tree, cell renderer here.

65
00:04:32,260 --> 00:04:34,340
And the reason I'm gonna do that is

66
00:04:34,340 --> 00:04:38,185
because server trees I render will give me
a

67
00:04:38,185 --> 00:04:41,500
checkbox that's formatted with the right
colors to fit

68
00:04:41,500 --> 00:04:43,270
into the tree, and I don't wanna have to.

69
00:04:43,270 --> 00:04:48,380
Let's use that code again But I don't
wanna use the chat box associated with

70
00:04:48,380 --> 00:04:53,650
server tree [UNKNOWN] either, because I've
found that if you try to use the same chat

71
00:04:53,650 --> 00:04:55,490
box for both the editor and the renderer

72
00:04:55,490 --> 00:04:58,850
function, you tend to get some confusion
going

73
00:04:58,850 --> 00:05:02,846
on and your tree gets a bit mixed up or
you site can't make that work.

74
00:05:02,846 --> 00:05:04,940
So I'm gonna call.

75
00:05:04,940 --> 00:05:05,850
Call that renderer.

76
00:05:05,850 --> 00:05:10,770
And in, I'm gonna give this a constructor
here.

77
00:05:10,770 --> 00:05:15,090
So I'll say public ServerTreeCellEditor

78
00:05:16,230 --> 00:05:20,940
like this, using Ctrl + Space
auto-complete to complete the constructor.

79
00:05:20,940 --> 00:05:26,680
And in an constructor I'm gonna say,
renderer equals new.

80
00:05:26,680 --> 00:05:29,690
Server tree cell renderer our path.

81
00:05:30,780 --> 00:05:37,360
Now when I go into the get tree cell
editor component we'll tackle, I think

82
00:05:37,360 --> 00:05:40,460
we'll tackle this first 'cause it's among,
well

83
00:05:40,460 --> 00:05:44,550
it's simpler than the is cell editable
function.

84
00:05:44,550 --> 00:05:45,930
I can then say here.

85
00:05:47,890 --> 00:05:53,510
I can get the checkbox from the server
tree cell renderer.

86
00:05:53,510 --> 00:06:00,201
So I can say
renderer.getTreeCellRendererComponent.

87
00:06:00,201 --> 00:06:03,980
And if I take the argument's that's
passed.

88
00:06:03,980 --> 00:06:08,160
By the tree into this function when it
calls this function and I pass

89
00:06:08,160 --> 00:06:09,890
them on to keep the tree rendering

90
00:06:09,890 --> 00:06:13,590
component then they will all have
appropriate values.

91
00:06:13,590 --> 00:06:16,820
I'll, I'll set that focus here to true
because get

92
00:06:16,820 --> 00:06:20,890
tree cell added component is not passed,
has a focused argument.

93
00:06:22,680 --> 00:06:25,690
Now that's gonna return some kind of
component

94
00:06:25,690 --> 00:06:26,920
such as it's going to be in this case.

95
00:06:26,920 --> 00:06:28,430
Okay it's a checkbox.

96
00:06:28,430 --> 00:06:33,062
So it's gonna be J CheckBox checkbox

97
00:06:33,062 --> 00:06:37,540
equals and I'm gonna return that check
box.

98
00:06:37,540 --> 00:06:38,538
So I'll say return check.

99
00:06:38,538 --> 00:06:40,757
Box.

100
00:06:40,757 --> 00:06:46,090
Now that's almost all I have to do here.

101
00:06:46,090 --> 00:06:48,210
Let's see if this is selected, this is

102
00:06:48,210 --> 00:06:51,380
selected and that's selected so let's make
these match.

103
00:06:54,060 --> 00:06:56,200
okay, and we've got an error.

104
00:06:56,200 --> 00:06:57,650
Can't convert.

105
00:06:57,650 --> 00:06:58,780
So we need to cast this.

106
00:06:58,780 --> 00:06:59,620
It's a J checkbox.

107
00:06:59,620 --> 00:07:05,770
I know it's going to be a J checkbox
because that's what my renderer returns.

108
00:07:05,770 --> 00:07:10,760
So if I look at the, the renderer that I
implemented in the last tutorial,

109
00:07:10,760 --> 00:07:15,760
get, where are we, get [UNKNOWN] surrender
component,

110
00:07:15,760 --> 00:07:20,200
returns a check box if it's a leaf.

111
00:07:20,200 --> 00:07:23,784
Actually, oh yeah, that reminds me, I'm
only going

112
00:07:23,784 --> 00:07:26,230
to [UNKNOWN] to a checkbox if it is a
leaf.

113
00:07:26,230 --> 00:07:28,880
Because, if it's not a leaf, it's going to
be a string object.

114
00:07:28,880 --> 00:07:30,360
Actually, let's get rid of that.

115
00:07:30,360 --> 00:07:36,590
But, say object, let's call this, I don't
know, com

116
00:07:38,890 --> 00:07:43,760
component equals and here I'll return
component.

117
00:07:45,890 --> 00:07:47,510
So, and...

118
00:07:47,510 --> 00:07:53,390
So you can see that this solitary
surrenderer is returning a check box

119
00:07:53,390 --> 00:07:58,980
if leaf renderer here is a check box and
it's

120
00:07:58,980 --> 00:08:02,720
returning a checkbox if we're dealing with
a leaf and if

121
00:08:02,720 --> 00:08:05,600
we're not returning, if we're not, we're
not dealing with a leaf.

122
00:08:05,600 --> 00:08:08,730
Turns, it calls default tree cell
renderor, that tree cell

123
00:08:08,730 --> 00:08:13,150
renderor component returns thee, default
which is, I suppose a stream.

124
00:08:14,250 --> 00:08:19,680
So I'm gonna get this component from it,
return the component here, and in fact

125
00:08:19,680 --> 00:08:21,620
this returns the component so we can make

126
00:08:21,620 --> 00:08:25,450
this component, there we go that should
work.

127
00:08:25,450 --> 00:08:31,540
And now I'm gonna say if leaf, and I'm
gonna do something special here because.

128
00:08:31,540 --> 00:08:36,570
And so as I say, what's gonna happen is is
that editable

129
00:08:36,570 --> 00:08:39,460
will have to return true, and we'll fix
that in a minute.

130
00:08:39,460 --> 00:08:43,489
And if it returns true the tree will call
getTreeCellEditorComponent.

131
00:08:44,550 --> 00:08:47,930
And then the use will be able to edit the

132
00:08:47,930 --> 00:08:52,110
leaf using the checkbox, cuz this will
return a checkbox.

133
00:08:52,110 --> 00:08:52,960
If we have a leaf.

134
00:08:54,730 --> 00:08:57,750
But, I need to tell the tree when I stop

135
00:08:57,750 --> 00:09:00,660
editing, cuz if I don't do that, it will
never.

136
00:09:00,660 --> 00:09:03,270
And switch parties in a renderer.

137
00:09:03,270 --> 00:09:07,220
Anyone never called is, anyone never
called get celebrity value.

138
00:09:07,220 --> 00:09:12,430
And get celebrity value is what you have
to get the value from when you edit.

139
00:09:12,430 --> 00:09:17,200
So which is the checkbox, and return it as
a user

140
00:09:17,200 --> 00:09:21,590
object which is then set in the node to
the tree.

141
00:09:21,590 --> 00:09:23,490
So this will never be called, unless

142
00:09:23,490 --> 00:09:27,630
I call fire stop editing or territories
here.

143
00:09:27,630 --> 00:09:29,250
So let, let's do that.

144
00:09:29,250 --> 00:09:31,940
Say if leaf.

145
00:09:31,940 --> 00:09:35,360
And now, I, how will I know when to stop
editing?

146
00:09:35,360 --> 00:09:40,270
So basically I need to cast component to a
checkbox with start.

147
00:09:40,270 --> 00:09:46,129
So I say jcheckbox checkbox equals, and if
I'm

148
00:09:46,129 --> 00:09:52,830
dealing with a leaf, it will be a
checkbox, so j, j.

149
00:09:52,830 --> 00:09:55,940
Check box components.

150
00:09:55,940 --> 00:09:59,570
I can then cast the component to checkbox.

151
00:09:59,570 --> 00:10:06,143
And I'm going to say
checkbox.AddItemListener.

152
00:10:06,143 --> 00:10:07,877
Like this.

153
00:10:07,877 --> 00:10:09,490
And I'm going to.

154
00:10:09,490 --> 00:10:11,450
Create an item listener here.

155
00:10:11,450 --> 00:10:13,380
So let's say item listener.

156
00:10:13,380 --> 00:10:19,040
Item listener is an interface, and if I
add an item listener to the check box,

157
00:10:19,040 --> 00:10:22,160
that item listener is gonna be invoked
whenever

158
00:10:22,160 --> 00:10:26,100
I tick or untick the tech, the checkbox.

159
00:10:26,100 --> 00:10:27,190
So let's say item listener.

160
00:10:28,210 --> 00:10:34,800
Item listener equals new item listener so
although it's an interface, if I do new

161
00:10:34,800 --> 00:10:37,150
item listener and then open a parenthesis
like

162
00:10:37,150 --> 00:10:40,230
this, I can implement an anonymous class
here.

163
00:10:41,270 --> 00:10:44,570
So I'll say add an implemented methods and

164
00:10:44,570 --> 00:10:47,710
item list just has this item state
changed.

165
00:10:47,710 --> 00:10:50,685
Which is called whenever you tick or
untick the checkbox.

166
00:10:52,340 --> 00:10:55,276
So if the items state changes on the check

167
00:10:55,276 --> 00:10:58,170
box, after that I can say okay, it's
changed.

168
00:10:58,170 --> 00:11:00,530
That means it's been ticked or unticked.

169
00:11:00,530 --> 00:11:03,190
Now we can go back to using a renderer.

170
00:11:03,190 --> 00:11:08,425
And the tree can get the value from a
checkbox, so here, I call fire, editing

171
00:11:08,425 --> 00:11:13,360
/u, and it's very very important to do
this step, or this stuff just won't work.

172
00:11:14,810 --> 00:11:19,930
And I add the item list to the check box,
and

173
00:11:19,930 --> 00:11:22,910
another thing I'm going to do is I'm
adding an item.

174
00:11:22,910 --> 00:11:26,940
List into a chat box, but I'm only using
one chat box here.

175
00:11:26,940 --> 00:11:29,778
It's the chat box that belongs to this
server tree

176
00:11:29,778 --> 00:11:34,490
cell renderer, 'cause I'm getting the chat
box from that.

177
00:11:34,490 --> 00:11:36,750
So it's just one chat box that I'm using.

178
00:11:36,750 --> 00:11:40,980
I don't wanna keep adding item lists to it
all the time.

179
00:11:40,980 --> 00:11:45,360
So what I'll do is I will.

180
00:11:45,360 --> 00:11:49,300
Remove the item listener and the item
state changed.

181
00:11:49,300 --> 00:11:56,048
So here I'll say check, actually I'll say,

182
00:11:56,048 --> 00:12:03,675
yeah, checkbox.remove, remove item
listener.

183
00:12:03,675 --> 00:12:09,200
And then I can either pass in the item
listener, or I can just pass in this.

184
00:12:09,200 --> 00:12:09,930
They're equivalent.

185
00:12:11,000 --> 00:12:14,530
Cuz this here will refer the anonymous
class.

186
00:12:14,530 --> 00:12:16,860
And because I can't refer to checkbox here

187
00:12:16,860 --> 00:12:21,210
because it's a local variable at the
moment, what

188
00:12:21,210 --> 00:12:24,280
I'll do is I'll make it an instance
variable

189
00:12:24,280 --> 00:12:29,230
so let's copy that and get rid of this.

190
00:12:29,230 --> 00:12:34,124
And up here, I'll say private JCheckBox
[SOUND]

191
00:12:34,124 --> 00:12:38,905
That's the [UNKNOWN] that it's a bit
[UNKNOWN].

192
00:12:38,905 --> 00:12:45,100
But unfortunately, the worst of the
complication here is not yet over.

193
00:12:47,900 --> 00:12:51,440
now, is cell editable is pretty tricky.

194
00:12:52,490 --> 00:12:56,700
And that accepts a, event object, I'll
call event here.

195
00:12:56,700 --> 00:12:59,600
And I'll get rid of the contents over
here.

196
00:12:59,600 --> 00:13:03,332
And now what we need to do [UNKNOWN] in
cell editable, is.

197
00:13:04,410 --> 00:13:06,990
We need to have a look and see what

198
00:13:09,010 --> 00:13:13,037
what actual branch your [UNKNOWN] the tree
or leaf,

199
00:13:13,037 --> 00:13:16,067
the user has clicked on and need to say
yes.

200
00:13:16,067 --> 00:13:20,170
[UNKNOWN] oh no we don't and if you don't.

201
00:13:20,170 --> 00:13:23,230
Do this step property if you wish to
return the trivia.

202
00:13:23,230 --> 00:13:26,340
Then you'll have problems with the
rendering of your tree

203
00:13:26,340 --> 00:13:31,898
because you'll be trying to every
[UNKNOWN] which is [UNKNOWN].

204
00:13:31,898 --> 00:13:34,520
And now, It's anybody seen.

205
00:13:34,520 --> 00:13:38,230
And implementation of this that I consider
completely satisfactory.

206
00:13:38,230 --> 00:13:43,050
And and I'm gonna, do something here,
which seems

207
00:13:43,050 --> 00:13:45,700
to be the, the usual way to do it.

208
00:13:45,700 --> 00:13:48,930
Where I'm going to look at mouse events,
and see what users

209
00:13:48,930 --> 00:13:53,740
click on last, because that's what you
usually do in a chat box.

210
00:13:53,740 --> 00:13:56,330
And, although the tree.

211
00:13:56,330 --> 00:14:00,110
Has a a get less, getLast,

212
00:14:00,110 --> 00:14:03,290
getLastPassComponent method or something
like that.

213
00:14:03,290 --> 00:14:05,620
And that somehow lags and it doesn't give

214
00:14:05,620 --> 00:14:08,560
you the right component that's just been
selected.

215
00:14:08,560 --> 00:14:13,060
And we really need here the component
that's just been selected.

216
00:14:13,060 --> 00:14:17,220
And this is the only way to do it that I
know of that I'm going to show you.

217
00:14:18,310 --> 00:14:21,010
But if you wanted to make your tree
keyboard accessible I think you'd

218
00:14:21,010 --> 00:14:23,410
probably have to do a bit more work here
than we're going to do.

219
00:14:23,410 --> 00:14:24,350
But anyway.

220
00:14:24,350 --> 00:14:27,510
I'll leave that as an exercise for you.

221
00:14:27,510 --> 00:14:31,360
So, the first thing to do there, is I need
to say

222
00:14:32,450 --> 00:14:38,005
if, if event is an instance of

223
00:14:38,005 --> 00:14:43,970
mouse.event, because if someone clicks.

224
00:14:43,970 --> 00:14:47,040
On a, a mode.

225
00:14:47,040 --> 00:14:50,720
Then, we will receive here, an instant of
mass event.

226
00:14:50,720 --> 00:14:54,690
And I wanna say, if it's not, an instance

227
00:14:54,690 --> 00:14:58,350
of mass event, then forget about it,
return false.

228
00:15:00,780 --> 00:15:03,270
If it is an instance of mass event, of
course we

229
00:15:03,270 --> 00:15:07,080
can copy it, and say mass event, so it
[UNKNOWN] it.

230
00:15:07,080 --> 00:15:12,920
Mouse event mouse event equals cast to a
mouse event event.

231
00:15:17,070 --> 00:15:19,810
Now the the next step here.

232
00:15:22,040 --> 00:15:28,400
Is, I need to use a method of the tree
that gets me the path, the component

233
00:15:28,400 --> 00:15:34,720
path which is a sequence of branches that
lead down to this leaf if it is a leaf.

234
00:15:34,720 --> 00:15:38,250
And fall the location of the mouse click.

235
00:15:38,250 --> 00:15:40,050
So I can get the tree.

236
00:15:40,050 --> 00:15:42,030
By saying event dot get source.

237
00:15:43,200 --> 00:15:47,030
Because the source of this event, is, my J
tree.

238
00:15:47,030 --> 00:15:48,654
So you say J, tree.

239
00:15:48,654 --> 00:15:55,710
Tree equals [UNKNOWN]
to a J tree, event dot get source.

240
00:15:57,600 --> 00:16:00,570
And having done that, I can then say.

241
00:16:00,570 --> 00:16:08,460
And tree dot get a path for location and I
can

242
00:16:08,460 --> 00:16:14,140
pass in the coordinates to this location
supplied by a mouse event and that will

243
00:16:14,140 --> 00:16:20,180
get me the path in terms of the sequence
of branches that leads

244
00:16:20,180 --> 00:16:24,990
and there the users actually collect on
basically, so here I'll say mouse...

245
00:16:24,990 --> 00:16:28,080
Events dot get x.

246
00:16:28,080 --> 00:16:28,580
There

247
00:16:31,200 --> 00:16:40,544
we go, and mouse event dot get y.

248
00:16:40,544 --> 00:16:43,610
Like, s was my y.

249
00:16:43,610 --> 00:16:45,368
There we go.

250
00:16:45,368 --> 00:16:46,610
And.

251
00:16:46,610 --> 00:16:50,360
That returns a tree path object.

252
00:16:50,360 --> 00:16:57,170
So TreePath path =, and now I just wanna
check that it's probably worth checking.

253
00:16:57,170 --> 00:17:00,810
I think it could potentially be null, but
I'm not sure, so we want to say.

254
00:17:00,810 --> 00:17:08,460
Say if path equals null then return false
because if it's

255
00:17:08,460 --> 00:17:10,710
null then then we'll just say no you can't
edit it.

256
00:17:13,220 --> 00:17:14,000
And okay.

257
00:17:16,510 --> 00:17:23,980
Now, from the path, we can say
path.getLastPathComponent and

258
00:17:23,980 --> 00:17:30,150
that gets us the last component in the
path which will be our leaf.

259
00:17:30,150 --> 00:17:30,460
I do.

260
00:17:30,460 --> 00:17:35,170
In this case a default mutable tree node
object, and it returns it as an object.

261
00:17:35,170 --> 00:17:43,750
So let's say object, last, component
equals get last path component.

262
00:17:43,750 --> 00:17:47,070
So this is, this is, if you worked on the
branch it's the last path component.

263
00:17:47,070 --> 00:17:48,020
It's the leaf itself.

264
00:17:48,020 --> 00:17:52,870
And I'm going to say if last component
equals null, but I'm not sure

265
00:17:52,870 --> 00:17:57,760
if it can be null, but best safe than
sorry, return false, and if we

266
00:17:57,760 --> 00:18:02,700
have now got a last path component, then
we know since the

267
00:18:02,700 --> 00:18:08,610
tree is built up in this case, our default
mutual tree nodes, so

268
00:18:08,610 --> 00:18:13,770
we can call that tree node, and set that
equal to.

269
00:18:13,770 --> 00:18:22,180
Cast, default mutable tree node, to last
component.

270
00:18:22,180 --> 00:18:26,290
Now, we're almost there now, because now I
can find out if this is a leaf or not.

271
00:18:27,510 --> 00:18:33,990
I can say if tree not.is leaf.

272
00:18:33,990 --> 00:18:38,960
Well let's actually, since I'm returning
faults here, let's say if

273
00:18:41,260 --> 00:18:47,729
not tree is leave or I can say if tree is
leaf equals

274
00:18:47,729 --> 00:18:54,680
false then return false.

275
00:18:54,680 --> 00:18:59,900
And right now, I think why don't we just
return tree is leaf?

276
00:18:59,900 --> 00:19:02,990
So if it's a leaf, we want to say you can
edit it.

277
00:19:04,000 --> 00:19:05,720
And if it isn't, you want to say no you
don't.

278
00:19:07,110 --> 00:19:10,860
And you could, you could here, I could
here use the nested if statement and

279
00:19:10,860 --> 00:19:15,310
a lot of a lot of code that you'll find
floating around the internet does that.

280
00:19:15,310 --> 00:19:18,820
But I quite like the, The method of going
through and

281
00:19:18,820 --> 00:19:23,550
eliminating possibilities and saying okay,
[UNKNOWN] return false, okay return false.

282
00:19:23,550 --> 00:19:25,480
And finally if you get to the end.

283
00:19:25,480 --> 00:19:27,315
If everything matches you return true.

284
00:19:27,315 --> 00:19:31,980
[UNKNOWN] extra nesting in your code which
I personally like.

285
00:19:33,270 --> 00:19:34,820
And that's the implementation of
[UNKNOWN].

286
00:19:34,820 --> 00:19:36,980
So much complicated.

287
00:19:36,980 --> 00:19:40,294
So remember, the tree will ask itself /u
it

288
00:19:40,294 --> 00:19:45,600
self-editable, whether it can edit tree
node or not.

289
00:19:45,600 --> 00:19:51,040
if this returns false, nothing else will
happen, instead, if it returns true,

290
00:19:51,040 --> 00:19:55,870
then, it will then call /u.

291
00:19:55,870 --> 00:19:59,200
A component to get the editor for that
node.

292
00:20:00,610 --> 00:20:05,410
And then you'll use your c component and
he or she will click on it hopefully.

293
00:20:05,410 --> 00:20:12,740
And once it's been clicked on, this will
call fire editing stopped will tell

294
00:20:12,740 --> 00:20:20,580
the tree to stop using to stop using the
editor and start using a renderer again.

295
00:20:20,580 --> 00:20:25,380
And before it does that, it will call get
cell editor values.

296
00:20:25,380 --> 00:20:31,950
Get cell editor value will only be called
if file editing stops.

297
00:20:33,030 --> 00:20:36,600
Is, is run here to tell the tree to stop
using the editor.

298
00:20:36,600 --> 00:20:38,430
So you must call that, it's important.

299
00:20:39,690 --> 00:20:41,960
Now if end gets the value.

300
00:20:41,960 --> 00:20:42,120
Here.

301
00:20:42,120 --> 00:20:48,800
What we wanna do is we re, return a server
info object, and really we need the server

302
00:20:48,800 --> 00:20:54,760
info object that we that is, corresponds
to the node that we are editing here.

303
00:20:56,080 --> 00:20:56,919
So what I'm gonna do is.

304
00:20:58,790 --> 00:21:03,930
I'm gonna create here a private server
info, info

305
00:21:06,940 --> 00:21:12,730
and in here so if I've got a leaf, I'm
gonna

306
00:21:12,730 --> 00:21:16,810
say okay, let's have a look at default
multiple tree node.

307
00:21:16,810 --> 00:21:18,520
Which is this, it's this object here.

308
00:21:18,520 --> 00:21:24,150
So I can say default, mutable tree note,
tree

309
00:21:24,150 --> 00:21:29,341
note equals cast default mutable tree
node.

310
00:21:30,500 --> 00:21:32,130
Sorry, I think I promised you that this,

311
00:21:32,130 --> 00:21:33,540
that message was finished, but I just
remembered.

312
00:21:33,540 --> 00:21:38,930
This extra bit now and I'm going to cast
the value up

313
00:21:38,930 --> 00:21:43,020
because these, these values are actually
the objects of trees made up of.

314
00:21:43,020 --> 00:21:47,790
And we made our tree up of default mutable
tree nodes.

315
00:21:47,790 --> 00:21:48,849
Now, I can say value.

316
00:21:50,020 --> 00:21:59,260
So I can say treenode.getuserobjects, and
that will get us a sev info object because

317
00:21:59,260 --> 00:22:01,880
when we constructed the leaf default
multiple tree

318
00:22:01,880 --> 00:22:05,170
modes we passed in sev info objects we

319
00:22:05,170 --> 00:22:09,210
share it with just this class I defined in
the last tutorial I think or the

320
00:22:09,210 --> 00:22:12,070
tutorial before, so I'm actually I'm gonna
use

321
00:22:12,070 --> 00:22:13,780
my instants method here cause I want to.

322
00:22:13,780 --> 00:22:16,170
So we cache the value of that temporarily.

323
00:22:16,170 --> 00:22:17,940
And I'll say info equals.

324
00:22:19,460 --> 00:22:22,130
And now, yeah, I need to cast that as
well.

325
00:22:22,130 --> 00:22:24,330
So to server info.

326
00:22:24,330 --> 00:22:26,476
Because this returns just an object.

327
00:22:26,476 --> 00:22:31,490
Now, in get [INAUDIBLE]
value which is the third of these

328
00:22:31,490 --> 00:22:36,670
methods to be called I can return info but

329
00:22:36,670 --> 00:22:41,968
before I do that I need to update this
info object with the latest information.

330
00:22:41,968 --> 00:22:45,830
On this checkbox, so to do that I just
need to say info.

331
00:22:45,830 --> 00:22:50,840
And I gave info a, a set check method.

332
00:22:50,840 --> 00:22:54,180
And I'm gonna set it to check and not
checked.

333
00:22:54,180 --> 00:22:59,510
And on the value of this checkbox, so
checkbox.ischecked.

334
00:23:00,910 --> 00:23:03,070
I think it says checked.

335
00:23:03,070 --> 00:23:04,720
Is selected.

336
00:23:04,720 --> 00:23:05,040
There we go.

337
00:23:05,040 --> 00:23:11,740
And finally I think we've got everything
here working.

338
00:23:12,790 --> 00:23:16,650
And, and one important thing that must be

339
00:23:16,650 --> 00:23:22,470
done actually is to make your tree
editable.

340
00:23:22,470 --> 00:23:24,210
You've got to call.

341
00:23:24,210 --> 00:23:29,270
Your J tree, set editable method,
otherwise

342
00:23:30,960 --> 00:23:36,090
is editable won't even be called and none
of these methods will do anything at all.

343
00:23:36,090 --> 00:23:39,080
Now let's try running that and see how it
looks.

344
00:23:39,080 --> 00:23:45,859
So here's my tree and I've got these
values here but that didn't seem to work.

345
00:23:46,920 --> 00:23:50,620
So let's take a look here.

346
00:23:52,550 --> 00:23:57,930
And actually, in fact I forgot the other
absolutely crucial thing that you may have

347
00:23:57,930 --> 00:24:03,470
noticed which is that I didn't actually
create the server tree surrender.

348
00:24:03,470 --> 00:24:05,070
I'm not actually using this code at all.

349
00:24:05,070 --> 00:24:10,550
So I'll say private server tree cell
sorry,

350
00:24:10,550 --> 00:24:12,740
I used the renderer not the editor so.

351
00:24:13,930 --> 00:24:18,990
So the tree cell editor, treeCellEditor.

352
00:24:18,990 --> 00:24:26,008
And here I need to set that to a, need to
say treeCellEditor = new.

353
00:24:26,008 --> 00:24:30,060
Server tri.cell editor.

354
00:24:30,060 --> 00:24:36,724
I need to say here server tri.cell

355
00:24:36,724 --> 00:24:44,850
editor and pass ND tri.cell editor I
think.

356
00:24:44,850 --> 00:24:47,320
We are finally there now.

357
00:24:47,320 --> 00:24:52,900
So if I run this now finally we've got
this

358
00:24:52,900 --> 00:24:55,720
tree and you can click the values on and
off.

359
00:24:55,720 --> 00:24:56,670
You can edit the nodes.

360
00:24:58,010 --> 00:25:01,480
So, you can probably see from all this
that trees are, And they're

361
00:25:01,480 --> 00:25:05,380
very flexible and potentially you can do
all kinds of things with them.

362
00:25:06,390 --> 00:25:11,390
In fact, yeah you see at the moment I can,
I'm selecting different

363
00:25:11,390 --> 00:25:14,140
modes here with up and down, the up and
down key on my keyboard.

364
00:25:14,140 --> 00:25:17,770
But because N is un editable I refer to
mouse

365
00:25:17,770 --> 00:25:21,240
events and I can't actually let it I'm
using the.

366
00:25:21,240 --> 00:25:24,260
Keyboard, and you'd have to do more work
to do that.

367
00:25:24,260 --> 00:25:26,360
And it's a lot of work digging the trees.

368
00:25:26,360 --> 00:25:28,150
But if it's your job, I guess you wouldn't
mind.

369
00:25:29,520 --> 00:25:32,940
But since I suspect this is as much as you

370
00:25:32,940 --> 00:25:35,165
probably want to know, I'm gonna leave it
with that.

371
00:25:35,165 --> 00:25:38,080
So we've got our [INAUDIBLE] tree there.

372
00:25:38,080 --> 00:25:42,189
And in the next tutorial we're gonna look.

373
00:25:43,510 --> 00:25:46,590
Collecting information from this tree.

374
00:25:47,900 --> 00:25:51,170
And we're also going to look at detecting
when

375
00:25:51,170 --> 00:25:56,050
all of these check boxes is clicked on or
off.

376
00:25:56,050 --> 00:25:57,910
So, join me again then.

377
00:25:57,910 --> 00:25:59,850
Until next time.

378
00:25:59,850 --> 00:26:00,680
Happy coding.

